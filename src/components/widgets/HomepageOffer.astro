---
import type { Steps } from '~/types';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

// Define a more specific type for the callToAction prop
// Allowing for known HTML anchor attributes and a general [key: string] for others.
// Explicitly type known attributes and use a more general type for the rest.
interface CallToActionObject extends Record<string, string | number | boolean | undefined> {
  href: string;
  text?: string;
  target?: string;
  rel?: string;
  // Add other common anchor attributes as needed
}

type CallToAction = CallToActionObject | string;

interface Props extends Steps {
  callToAction?: CallToAction;
}

const props = Astro.props as Props;

// Prepare callToAction attributes
let callToActionProps: CallToActionObject | { href: string; text?: string } | null = null;

if (typeof props.callToAction === 'string') {
  callToActionProps = { href: props.callToAction, text: 'Start' };
} else if (props.callToAction) {
  callToActionProps = { ...props.callToAction }; // Spread to make a mutable copy
  if (!callToActionProps.text) {
    callToActionProps.text = 'Start'; // Default text if not provided
  }
}

const { href, text, ...restCallToActionAttrs } = callToActionProps || { href: undefined, text: undefined };
---

<WidgetWrapper
  id={props.id}
  isDark={props.isDark}
  containerClass={`max-w-5xl ${props.classes?.container ?? ''}`}
  bg={props.bg}
>
  <!-- Example items rendering -->
  <div class={`flex ${props.isReversed ? 'flex-row-reverse' : 'flex-row'} gap-8`}>
    {
      props.items.map((step) => (
        <div class="flex-1 text-center">
          {step.icon && <img src={step.icon} alt="" />}
          <h4 class="font-bold">{step.title}</h4>
          {step.description && <p>{step.description}</p>}
        </div>
      ))
    }
  </div>
  <!-- Example call to action -->
  {
    href && (
      <a href={href} {...restCallToActionAttrs} class="btn mt-4">
        {text}
      </a>
    )
  }
</WidgetWrapper>
